;; lemon.asd, autogenerated to contain hard-coded paths from lemon.asd.in
;; DO NOT EDIT

#+quicklisp
(eval-when (:compile-toplevel :load-toplevel :execute)
  (ql:quickload "cffi"))

;; shared library support:
(defclass shared-unix-library (module)
  ((library-designator
    :type (or symbol string list pathname)
    :initarg :library-designator
    :documentation
    "Library designator suitable to be passed to cffi:load-foreign-library")))
(defmethod input-files (operation (component shared-unix-library))
  nil)
(defmethod output-files ((operation compile-op) (component shared-unix-library))
  nil)
(defmethod perform ((operation compile-op) (component shared-unix-library))
  nil)
(defmethod operation-done-p ((o compile-op) (c shared-unix-library))
  t)
(defmethod operation-done-p ((o load-op) (c shared-unix-library))
  nil)
(defmethod perform ((operation load-op) (component shared-unix-library))
  (let ((cffi:*foreign-library-directories*
         ;; add autoconf substitution here:
         `(#p"@LEMON_LIB_DIR@/"
	   #p"@abs_top_builddir@/.libs/"
           #p"@prefix@/lib/" ;; might work...
           ,cffi:*foreign-library-directories*)))
    (let ((lib
           (cffi:load-foreign-library
            (slot-value component 'library-designator))))
      (format *standard-output*
              "~&;; loaded shared-unix-library ~A as ~A~%"
              (component-name component)
              lib)
      lib)))

(asdf:defsystem lemon
  :version "0.1.0"
  :description "LEMON graph library lisp bindings"
  :maintainer "Utz-Uwe Haus <lisp@uuhaus.de>"
  :author "Utz-Uwe Haus <lisp@uuhaus.de>"
  :licence "Boost Software License, Version 1.0"
  :depends-on (:cffi :trivial-garbage)
  :components ((:shared-unix-library
                "liblmn"
                :library-designator
                (:or
                 ;; darwin:
                 "liblmn.0.dylib"
                 "liblmn.dylib"
                 "@abs_top_builddir@/.libs/liblmn.dylib"
                 ;; normal ld.so:
                 "liblmn.so.0.0.0"
                 "liblmn.so.0"
                 "liblmn.so"
                 "liblmn"
                 "@abs_top_builddir@/.libs/liblmn.so"))
               (:file "lemon-api"
                      :depends-on ("liblmn"))
;;               (:file "patches")
               (:file "lemon-packages"
                      :depends-on ("lemon-api"))
	       (:file "max-flow"
		      :depends-on ("lemon-api"))))
